# vim: ft=zsh sw=2 ts=2 expandtab
# This file is loaded first and anything defined here
# will be available to all subcommands.
# This is a valid bash file and will execute
SUBCOMMAND_DESC="Environment setttings"
SUBCOMMAND_HELP=$(cat <<EOH

This is a plain shell file that is loaded
before any other library and/or command.

Things that are "global" can go here.

EOH
)

# Example, force Java to version 1.7 for all subcomands.
# export JAVA_HOME=$(/usr/libexec/java_home -v 1.7)

# A helper function...
# that returns true if running on OSX
function __osx() {
  [[ $(uname) == "Darwin" ]]
}

# Simple macOS || Linux function
function __osname() {
  __osx && echo "macos" || echo "linux"
}

# function to load libraries
function use() {
  readonly lib="${1?Missing library}"
  log "requiring: ${lib}"
  [[ -f ${SUBCOMMANDS_DIR}/_${lib} ]] || error "Library ${lib} not found\n"
  . ${SUBCOMMANDS_DIR}/_${lib}
}

# Find which macOS version
function macos_name() {
  if __osx; then
    local v=$(sw_vers -productVersion | awk -F'.' '{print $1}')
    log "macos_version: ${v:r}"
    case ${v:r} in
      12) echo "monterey" ;;
      11) echo "bigsur"   ;;
      10) echo "catalina" ;; # assuming catalina for all v10
      *)  warn "can't determine macOS product name" ;;
    esac
  fi
}

# This will open a file with open in OSX
# or try xdg-open on Ubuntu...
function open_file() {
  local file=${1}
  [[ -n ${file} ]] || return
  __osx && open ${file} || xdg-open ${file}
}

function file_download() {
  local uri="${1}"
  local file="${2}"
  local download_dir=$(mktemp -d /tmp/grind_download.XXXXXX)
  log "created tmpdir: ${download_dir}"
  /usr/bin/curl -o "${download_dir}/${file}" -C - -L -sS --url "${uri}" || error "Error downloading file from ${uri}\n"
  log "downloaded: ${download_dir}/${file}"
  echo "${download_dir}/${file}"
}

function safe_rm_download_dir() {
  local file=${1?"Missing download directory"}
  local dir=$(dirname ${file})

  log "_safe_rm_file: ${file}"
  [[ -f "${file}" ]] && rm -f "${file}" \
    || warn "Could not remove file: ${file}"

  log "_safe_rm_dir: ${dir}"
  [[ -d "${dir}" && "${dir}" =~ ^/tmp/grind_download\. ]] && rmdir "${dir}" \
    || warn "Directory: ${dir} does not look like a grind download directory.\n"
}

function as_admin() {
  local cmd="${1}"
  log "as_admin request for ${cmd}"
  in_yellow "Requiring admin privileges to run '${cmd}'\n"
  osascript -e "do shell script \"${cmd}\"  with administrator privileges "
}

# These are defaults for configuration directory and file
# they can be overwriten using environmental variables
GRIND_CONF_DIR=${GRIND_CONF_DIR:-"${ROOT_DIR}/conf"}
GRIND_CONF_FILE=${GRIND_CONF_FILE:-"${GRIND_CONF_DIR}/grind.conf"}

# default values for user configurations
GRIND_DEF_DIR=${GRIND_DEF_DIR:-"${ROOT_DIR}/definitions"}
GRIND_MACHINE_NAME=${GRIND_MACHINE_NAME:-$(hostname -s)}

# load user configurations
log "user configurations from: ${GRIND_CONF_FILE}"
[[ -f ${GRIND_CONF_FILE} ]] && . ${GRIND_CONF_FILE}

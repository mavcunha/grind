# vim: ft=zsh
use "core"

SUBCOMMAND_DESC="Check current installation versus definitions"
SUBCOMMAND_HELP=$(cat <<EOH

Usage ${MAIN_COMMAND} ${SUBCOMMAND}

Runs 'grind update run' to capture what software was requested to be installed.
Then checks against what is installed in the machine and outputs the
differences between installed and requested. NOTE: grind can't identify
transitive dependencies, such as A depends on B which depends on C. In this
case you might see the software C listed as extra but in reality it is not.


EOH
)

# these need to be excluded from checks
typeset -ga _MAS_DEFAULT_APPS_MONTEREY=(
  'App Store' Automator Books Calculator Calendar Chess
  Contacts Dictionary FaceTime 'Find My' 'Font Book' 
  GarageBand Home iMovie Keynote Mail Maps Messages
  Music News Notes Numbers Pages 'Photo Booth' Photos
  Podcasts Preview Reminders Safari Shortcuts Stickies
  Stocks TextEdit TV VoiceMemos 'Time Machine' 'Image Capture'
  'Launchpad' 'Mission Control' 'QuickTime Player' Siri 
  'System Preferences' 'FindMy')

typeset -ga _MAS_DEFAULT_APPS_VENTURA=(
  ${_MAS_DEFAULT_APPS_MONTEREY}
  Weather 'System Settings' Freeform TestFlight Clock)

function _dc_default_apps() {
  # default apps
  local osname=$(macos_name)
  local default_apps="_MAS_DEFAULT_APPS_${(U)osname}"
  log "loading default apps for '${osname}': ${(j/,/P)default_apps[@]}"
  echo "${(P)default_apps}"
}

function _dc_ignored_by_conf() {
  if [[ -n ${GRIND_CHECK_IGNORE_APPS} ]]; then
    log "loading ignored apps from configuration: ${(@j/,/)GRIND_CHECK_IGNORE_APPS}"
    echo ${GRIND_CHECK_IGNORE_APPS}
  else
    return
  fi
}

function _dc_apps_installed() {
  # list files in /Applications and /System/Applications, ignore ':' and empty lines
  local apps_installed="${(f)$(ls /Applications /System/Applications | grep -E '(.app|.localized)' | grep -vE '(:|^$)')}"
  log "found installed: ${apps_installed}"
  echo "${apps_installed}"
}

function missing_apps() {
  # gather applications requested by brew cask and mas
  local -a cask_apps=("${(@f)$(brew_cask_requested)}")
  local -a mas_apps=("${(@f)$(mas_requested)}")
  local -a appdmg_apps=("${(@f)$(appdmg_requested)}")
  log "caks_apps: ${(j/,/)cask_apps}"
  log "mas_apps: ${(j/,/)mas_apps}"
  log "appdmg_apps: ${(j/,/)appdmg_apps}"

  local -a all_requested=(${cask_apps}  ${mas_apps} ${appdmg_apps})

  # gather default apps for this macOS
  local -a ignore_apps=(${(@f)$(_dc_default_apps)} ${(@f)$(_dc_ignored_by_conf)})

  local extra_apps=""
  # loop on installed apps, check if is default, requested or extra
  for app in "${(@f)$(_dc_apps_installed)}"; do
    local app_name="${app:t:r}"
    if grep -q ${app_name} <<<"${(@f)ignore_apps}"; then
      log "[ignored]\t${app_name}"
    elif ! grep -q ${app_name} <<<"${(@f)all_requested}"; then
      log "[extra_app]\t${app_name}"
      extra_apps+="${app_name}\n"
    else
      log "[requested]\t${app_name}"
    fi
  done

  echo "${extra_apps}"
}

function _check_run_update() {
  for d in $(machine_definitions); do
    log "about to run ${d}"
    run_def ${d}
  done
}

case ${1} in
  noop) ;;
  -h|--help) help ;;
  *)
    [[ -n ${GRIND_QUIET} ]] && use "core-quiet"

    use "brew"; use "mas"; use "appdmg"; # we will need functions from these

    # first we need to run the regular update
    # routine to capture all requests
    _check_run_update

    in_cyan "Check for missing definitions\n"
    in_green "\nListing missing software definitions\n"

    in_yellow ">>>brew packages installed but not defined<<<\n"
    in_yellow "$(brew_missing 'pkg')\n"

    in_yellow ">>>applications installed but not defined (please wait)<<<\n"
    in_yellow "$(missing_apps)\n"
  ;;
esac

# vim: ft=zsh
use "core"

SUBCOMMAND_DESC="Run definitions for this machine"
SUBCOMMAND_HELP=$(cat <<EOH
Usage ${MAIN_COMMAND} ${SUBCOMMAND}

-n|--dry          Do not actually execute do_run, show
                  definitions that would run as NOOP.
                  This should be safe as long the run checks
                  are safe.

-l|--list         List the definitions that will be executed
                  for this machine.

-f|--force        Force execution regardless run checks results.
                  This is potentially dangerous.

EOH
)

function _update_recur() {
  local cmd="${1?Missing cmd on _update_recur call}"
  for d in $(machine_definitions); do
    log "about to ${cmd} ${d}"
    [[ ${cmd} == "run" ]] && run_def "${d}" || in_cyan ">>>${d}<<<\n";
  done
  [[ -n ${GRIND_VERBOSE} ]] || echo
}


case ${1} in
  noop) ;;
  -h|--help) help ;;
  -l|--list)
    in_cyan "Definitions for ${GRIND_MACHINE_NAME}\n"
    _update_recur "list"
  ;;
  -n|--dry)
    in_cyan "Update using dry run\n"
    use "core-dryrun" # this overrides __run
    _update_recur "run"
  ;;
  -f|--force)
    in_cyan "Update using force\n"
    warn "Force will run definitions regardless of its run checks results\n"
    warn "This is potentially dangerous\n"

    if read -q "confirm?Press Y/y to confirm, other key to cancel: "; then
      use "core-force" # this overrides __conditional_run
      _update_recur "run"
    else
      in_yellow "\nCanceled.\n"
    fi
  ;;
  *)
    in_cyan "Update run\n"
    [[ -n ${GRIND_VERBOSE} ]] || use "core-quiet"
    _update_recur "run"
  ;;
esac

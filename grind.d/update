# vim: ft=zsh
use "core"

SUBCOMMAND_DESC="Update machine commands"
SUBCOMMAND_HELP=$(cat <<EOH
Usage ${MAIN_COMMAND} ${SUBCOMMAND}

run               Update machine with latest definitions

dry               Do not actually execute do_run, show
                  definitions that would run as NOOP.
                  This should be safe as long the run checks
                  are safe.

list              List the definitions that will be executed
                  for this machine.

force             Force execution regardless run checks results.
                  This is potentially dangerous.

check             (beta) First it runs 'grind update run' and 
                  capture what software was requested to be installed
                  than runs checks against what is installed in the 
                  machine and outputs the differences.

EOH
)

function _recur() {
  local dir="${1}"
  local cmd="${2}"
  log "_recur: ${dir} cmd: ${cmd}"
  if [[ -d ${dir} ]]; then
    for i in $(export LC_COLLATE=C; find -L ${dir} -not -path "*/\.*" -type f -or -type l | sort); do
      log "found: ${i}"
      local defname=${i##${GRIND_DEF_DIR}/}
      log "defname: ${defname}"
      [[ ${cmd} == "run" ]] && run_def "${defname}" || in_cyan ">>>${defname}<<<\n";
    done
  fi
}

function _load_recur() {
  log "invoke _recur dir: ${1} cmd: run"
  _recur "${1}" "run";
}

function _list_recur() {
  log "invoke _recur dir: ${1} cmd: list"
  _recur "${1}" "list";
}

function _call() {
  local func="${1}"
  local ddirs=(${(P)2})
  for d in ${ddirs[@]}; do
    log "_call ${func} on ${d}"
    ${func} ${d}
  done
}

# these are two possible locations for 
# definition, global definitions and this
# machine definitions
typeset -a def_dirs=(
  "${GRIND_DEF_DIR}/global"
  "${GRIND_DEF_DIR}/machines/${GRIND_MACHINE_NAME}")


case ${1} in
  run)
    in_cyan "Update run\n"
    [[ -n ${GRIND_QUIET} ]] && use "core-quiet"
    _call _load_recur def_dirs
  ;;
  list)
    in_cyan "Update listing definitions\n"
    _call _list_recur def_dirs
  ;;
  dry)
    in_cyan "Update using dry run\n"
    use "core-dryrun" # this overrides __run
    _call _load_recur def_dirs
  ;;
  force)
    in_cyan "Update using force\n"
    warn "Force will run definitions regardless of its run checks results\n"
    warn "This is potentially dangerous\n"

    if read -q "confirm?Press Y/y to confirm, other key to cancel: "; then
      use "core-force" # this overrides __conditional_run
      _call _load_recur def_dirs
    else
      in_yellow "\nCanceled.\n"
    fi
  ;;
  check)
    in_cyan "Check for missing definitions\n"
    use "brew"
    use "mas"

    # first we need to run the regular update
    # routine to capture all definitions requests
    _call _load_recur def_dirs

    in_green "(beta) Listed bellow all software not found in definitions\n"

    in_cyan "brew packages not found:\n"
    in_yellow "$(brew_missing 'pkg')\n"

    in_cyan "brew casks not found:\n"
    in_yellow "$(brew_missing 'cask')\n"

    in_cyan "brew taps not found:\n"
    in_yellow "$(brew_missing 'tap')\n"

    in_cyan "applications not found:\n"
    in_yellow "$(mas_missing)\n"
  ;;
esac

# vim: ft=zsh
SUBCOMMAND_DESC="Library for run and run checks"
SUBCOMMAND_HELP=$(cat <<EOH

Usage:

This is the main library of gring and it is
required by default during the execution of
all definitions.

Public functions:

do_run CMD          Will buffer command CMD for execution.

run CMD             Will buffer command CMD and call __run
                    for immediate execution.

unless CMD          Will execute CMD, if CMD returns 0 it
                    will return false. If CMD returns != 0
                    it will return true.

unless_file ARG     Same as unless "[[ -f ARG ]]"

unless_dir ARG      Same as unless "[[ -d ARG ]]"

unless_on_path ARG  Same as unless "[[ type ARG &> /dev/null ]]"

unless_link ARG     Same as unless "[[ -L ARG ]]"

if_ CMD             Will execute CMD, if CMD returns 0 it will
                    return true. If CMD returns != 0 it will
                    return false.

if_dir ARG          Same as if_ '[[ -d ARG ]]'

stop_on_fail [MSG]  Will stop execution of grind if the last
                    executed command failed.

warn_on_fail [MSG]  Will issue a warn during execution if the last
                    executed command failed.

Private functions:

__strip_spaces ARG             Will remove all spaces of a given string.

__iexec CMD                    "Idempotent Exec" will execute CMD and remember
                               that was called. If __iexec is called with the same
                               CMD again it will warn and won't call CMD again.

__capture_exit_code            Saves last exit code for use with __last_exit_code

__last_exit_code               Returns as string the last exit code encountered

__box MSG                      Writes "[MSG]" on screen

__yellow_box MSG               Same as __box with MSG printed in yellow

__green_box MSG                Same as __box with MSG printed in green

__magenta_box MSG              Same as __box with MSG printed in magenta

__red_box MSG                  Same as __box with MSG printed in red

__run                          Will invoke __iexec for the next CMD already buffered

__conditional_run CMD REG      Will execute CMD through __iexec and check the exit code
                               against REG (regular expression). If match should call __run
                               if not should print SKIP using __green_box

EOH
)

typeset -gA __GRIND_EXECS
typeset -g  __GRIND_CMD_NEXT
typeset -g  __GRIND_CMD_LAST
integer -g  __GRIND_CMD_EXIT_CODE

function __strip_spaces() {
  echo ${1// /}
}

function __iexec() {
  local k=$(__strip_spaces "${1}")
  log "__iexec: ${1}"
  if [[ -n ${__GRIND_EXECS[${k}]} ]]; then
    log "already ran: ${1}, skipping."
    __capture_exit_code
  else
    log "mark: ${1} as ran"
    __GRIND_EXECS[${k}]="${1}"
    __GRIND_CMD_LAST="${1}"
    log "call: ${1}"
    eval "${1}"
    __capture_exit_code
  fi
}

function __capture_exit_code() {
  local code=$?
  log "__capture_exit_code: ${code}"
  __GRIND_CMD_EXIT_CODE=${code}
}

function __last_exit_code() {
  log "__last_exit_code: ${__GRIND_CMD_EXIT_CODE}"
  echo ${__GRIND_CMD_EXIT_CODE}
}

function __box() {
  echo "$(in_cyan '[')$(echo "${1}" )$(in_cyan ']')"
}

function __yellow_box() {
  __box "$(in_yellow "${1}")"
}
function __green_box() {
  __box "$(in_green "${1}")"
}
function __magenta_box() {
  __box "$(in_magenta "${1}")"
}
function __red_box() {
  __box "$(in_red "${1}")"
}

function __run() {
  __iexec "${__GRIND_CMD_NEXT}"
}

function __conditional_run() {
  local cmd="${1}"
  local reg="${2}"
  log "__conditional_run: ${cmd} re: ${reg}"
  __iexec "${cmd}"
  if [[ $(__last_exit_code) =~ ${reg} ]]; then
    log "exit matched ${reg}: RUN"
    __run
    __yellow_box 'RUN'
  else
    log "exit didn't match ${reg}: SKIP"
    __green_box 'SKIP'
  fi
}

### Public accessible API

function do_run() {
  log "do_run: ${1}"
  in_cyan "do_run: ${1}\n"
  __GRIND_CMD_NEXT="${1}"
}

function run() {
  log "run: ${1}"
  in_cyan "run: ${1}\n"
  __GRIND_CMD_NEXT="${1}"
  __run
}

function unless() {
  log "unless: ${1}"
  in_cyan "\tunless: ${1}\n"
  # run if command returns != 0
  __conditional_run "${1}" "^[1-9][0-9]*$"
}

function unless_file() {
  log "unless_file: ${1}"
  in_cyan "\tunless_file: ${1}\n"
  unless "[[ -f \"${1}\" ]]"
}

function unless_dir() {
  log "unless_dir: ${1}"
  in_cyan "\tunless_dir: ${1}\n"
  unless "[[ -d \"${1}\" ]]"
}

function unless_on_path() {
  log "unless_on_path: ${1}"
  in_cyan "\tunless_on_path: ${1}\n"
  unless "type ${1} &> /dev/null"
}

function unless_link() {
  log "unless_link: ${1}"
  in_cyan "\tunless_link: ${1}\n"
  unless "[[ -L \"${1}\" ]]"
}

function unless_running() {
  log "unless_running: ${1}"
  in_cyan "\tunless_running: ${1}\n"
  unless "pgrep ${1} &> /dev/null"
}

function if_() {
  log "if_: ${1}\n"
  in_cyan "\tif_: ${1}\n"
  __conditional_run "${1}" "^0$"
}

function if_dir() {
  log "if_dir: ${1}"
  in_cyan "\tif_dir: ${1}\n"
  if_ "[[ -d \"${1}\" ]]"
}

function stop_on_fail() {
  local msg="${1:-"stop_on_fail defined"}"
  log "stop_on_fail: ${1}"
  if [[ $(__last_exit_code) -ne 0 ]]; then
    in_red "STOP: ${__GRIND_CMD_LAST} exited with $(__last_exit_code)\n"
    in_red "STOP: ${msg}\n"
    exit 1
  fi
}

function warn_on_fail() {
  local msg="${1:-"warn_on_fail defined"}"
  log "warn_on_fail: ${1}"
  if [[ $(__last_exit_code) -ne 0 ]]; then
    in_yellow "WARN: ${__GRIND_CMD_LAST} exited with $(__last_exit_code)\n"
    in_yellow "WARN: ${msg}\n"
    exit 1
  fi
}

function run_def() {
  local def="${1}"
  if [[ -f ${GRIND_DEF_DIR}/${def} ]]; then
    in_cyan ">>>${def}<<<\n"
    log "running ${GRIND_DEF_DIR}/${def}"
    . ${GRIND_DEF_DIR}/${def}
  elif [[ -n ${def} ]]; then
    error "${GRIND_DEF_DIR}/${def} definition not found.\n"
  fi
}

# allow access to help by 'grind _lib --help'
case ${1} in -h|--help) help;; esac

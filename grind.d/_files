# vim: ft=zsh
SUBCOMMAND_DESC="Library for file definitions"
SUBCOMMAND_HELP=$(cat <<EOH

This API assumes as ORIGIN for files to be
a diretory under GRIND_DEF_DIR called 'files'.
The ORIGIN file name is a path to a file inside
files, you do not need to give the full path.

Functions:

file ORIG DEST                       Will copy the file from GRIND_DEF_DIR/files/ORIG
                                     to DEST if DEST doesn't exist.

file_force ORIG DEST                 Will copy the file from GRIND_DEF_DIR/files/ORIG to
                                     DEST even if it already exists.

link ORIG DEST                       Will create a soft link from ORIG to DEST if DEST
                                     doesn't exist.

link_force ORIG DEST                 Will create a soft link from ORIG to DEST regardless
                                     if DEST already is a link or a file.

file_replace TARGET ASSOC_ARRAY      Will use ASSOC_ARRAY to replace tokens found in TARGET.
                                     Example:
                                         declare -Ax tokens=([NAME]='John' [AGE]='31')
                                         file_replace "/path/to/my/file" tokens

                                     This will replace any occurence of NAME for John and
                                     AGE for 31 in the file. The keys of ASSOC_ARRAY can
                                     be extended regular expressions. This function will
                                     draw a random key from ASSOC_ARRAY and check if exists
                                     in TARGET, if does not it will skip the execution on
                                     the assumption it ran already.

dir ORIG DEST                        Will copy all contents from GRIND_DEF_DIR/files/ORIG to
                                     DEST. ORIG and DEST must both be directories.

dir_force ORIG DEST                  Will copy all contents from GRIND_DEF_DIR/files/ORIG to
                                     DEST overwriting existing files. ORIG and DEST must both
                                     be directories.
EOH
)

__FILES_DEF_DIR="${GRIND_DEF_DIR}/files"

function _file_exists () {
  local file="${1}"
  log "checking if '${file}' exists first."
  [[ -f "${file}" ]] || error "Cannot find file ${file}"
}

function _dir_exists () {
  local dir="${1}"
  log "checking if directory '${dir}' exists"
  [[ -d "${dir}" ]] || error "Cannot find directory ${dir}"
}

function __assoc_array_to_string() {
  local -A assoc_array=(${(Pkv)1})
  for k in ${(k)assoc_array}; do
    values="${values}[${k}]=${assoc_array[${k}]} "
  done
  echo "${values}"
}

# Replace tokens in file using sed
function file_replace() {
  local target="${1}"
  local -A __replace_tokens=(${(Pkv)2})
  log "file_replace: target=${target} replace=($(__assoc_array_to_string __replace_tokens))"
  _file_exists "${target}"

  sample_key=${${(k)__replace_tokens}[1]}
  [[ -n ${sample_key} ]] || error "Missing at least one replacement definition"

  for k in ${(k)__replace_tokens}; do
    sed_commands="${sed_commands}-e 's#${k}#${__replace_tokens[${k}]}#g' "
  done

  log "file_replace: run sed if '${sample_key}' is found in ${target}"
  do_run "sed -E -i '' ${sed_commands} ${target}"
    unless "! grep -qE '${sample_key}' '${target}'"
}

# Copy file only if does not exist at destination
function file() {
  local orig="${1}"
  local dest="${2}"
  log "file: orig=${orig} dest=${dest}"
  _file_exists "${__FILES_DEF_DIR}/${orig}"
  do_run "cp -v '${__FILES_DEF_DIR}/${orig}' '${dest}'"
    unless_file "${dest}"
}

# Copy file without worrying if it exists at destination
function file_force() {
  local orig="${1}"
  local dest="${2}"
  log "file_force: orig=${orig} dest=${dest}"
  _file_exists "${__FILES_DEF_DIR}/${orig}"
  run "cp -vf '${__FILES_DEF_DIR}/${orig}' '${dest}'"
}

# Link orig to dest unless dest is already a link
function link() {
  local orig="${1}"
  local dest="${2}"
  log "link: orig=${orig} dest=${dest}"
  _file_exists "${__FILES_DEF_DIR}/${orig}"
  do_run "ln -s '${__FILES_DEF_DIR}/${orig}' '${dest}'"
    unless_link "${dest}"
}

# Link from orig to dest regardless if dest already
function link_force() {
  local orig="${1}"
  local dest="${2}"
  log "link: orig=${orig} dest=${dest}"
  _file_exists "${__FILES_DEF_DIR}/${orig}"
  run "ln -fvs '${__FILES_DEF_DIR}/${orig}' '${dest}'"
}

# Copy contents of dir orig into dir dest
function dir() {
  local orig="${1%%/}"
  local dest="${2%%/}"
  log "dir: orig=${orig} dest=${dest}"
  _dir_exists "${__FILES_DEF_DIR}/${orig}"
  _dir_exists "${dest}"
  run "cp -vrn '${__FILES_DEF_DIR}/${orig}/' '${dest}/' "
}


# Same as dir but overwriting existing files
function dir_force() {
  local orig="${1%%/}"
  local dest="${2%%/}"
  log "dir: orig=${orig} dest=${dest}"
  _dir_exists "${__FILES_DEF_DIR}/${orig}"
  _dir_exists "${dest}"
  run "cp -vrf '${__FILES_DEF_DIR}/${orig}/' '${dest}/' "
}
